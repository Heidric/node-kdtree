{"name":"node-kdtree","body":"node-kdtree is a node.js addon that defines a wrapper to libkdtree, allowing one to work with KD trees directly in node. A [KD tree](http://en.wikipedia.org/wiki/Kd-tree) is a data structure that organizes points in a multi-dimensional space, and in particular is useful for performing efficient nearest neighbor searches.\r\n\r\n## Dependencies\r\nThe [kdtree](https://github.com/jtsiomb/kdtree) C library is required. In order to install, get the latest version from [here](https://github.com/jtsiomb/kdtree/releases) and run the following commands:\r\n\r\n    ./configure\r\n    make\r\n    sudo make install PREFIX=/usr \r\n\r\n## Installation\r\nThe easiest way to install node-kdtree is to use the [npm](https://github.com/isaacs/npm) package manager:\r\n\r\n    npm install kdtree\r\n\r\n## Usage\r\n\r\n### Creating a tree\r\nYou may create a tree by instantiating a new `KDTree` object:\r\n\r\n    var kd = require('kdtree');\r\n    var tree = new kd.KDTree(3); // A new tree for 3-dimensional points\r\n\r\nWhen creating a new tree we can specify the dimensions of the data. For example, a three-dimensional tree will contain points of the form (x, y, z). If a dimension is not specified, the tree defaults to three dimensions.\r\n\r\n### Adding data to a tree\r\nData may be added to the tree using the `insert` method:\r\n\r\n    tree.insert(1, 2, 3);\r\n    tree.insert(10, 20, 30);\r\n\r\nThere must be one argument for each dimension of the data - for example, a three dimensional tree would have three arguments to `insert`. An optional data parameter may also be specified to store a data value alongside the point data:\r\n\r\n    tree.insert(39.285785, -76.610262, \"USS Constellation\");\r\n\r\n### Nearest neighbor searches\r\nThe `nearest` method is used to find the point in the tree that is closest to a target point. For example:\r\n\r\n    > tree.nearest(39.273889, -76.738056);\r\n    [39.272051, -76.731917, \"Bill's Music, Inc.\"]\r\n\r\n`nearest` will return an array containing closest point, or an empty array if no points were found. As shown above, if the point contains a data value, that value will also be returned at the end of the array.\r\n\r\n\r\nA `nearestRange` method is also provided, which allows us to find all of the points within a given range. For example:\r\n\r\n    > tree.nearestRange(0, 0, 3);\r\n    [ [ 1, 1 ],\r\n      [ 0, 2 ],\r\n      [ 2, 0 ],\r\n      [ 1, 0 ],\r\n      [ 0, 1 ],\r\n      [ 0, 0 ] ]\r\n\r\nThe first arguments to `nearestRange` are the components of the point to begin searching at. The last argument is the search range.\r\n\r\n## API\r\n\r\n[API documentation](https://github.com/justinethier/node-kdtree/blob/master/doc/API.markdown)\r\n\r\n## Credits\r\n\r\nnode-kdtree is developed by [Justin Ethier](http://github.com/justinethier).\r\n\r\nThanks to John Tsiombikas for developing libkdtree!\r\n\r\nPatches are welcome; please send via pull request on github.\r\n","tagline":"A node.js add-on for performing efficient Nearest Neighbor searches using libkdtree.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
